UI:
I used Auto-Layout on the ViewController so that the graphics are adjustable to any screen size for both iPhone and iPad. This was done using the constraints and alignment tools in Xcode. The UI is made of a 10x6 grid of UIImageViews, which can display images and colors easily. Each UIImageView has a TapGestureRecognizer so the user experiences a grid of tiles that can be tapped individually. A reset button reverts to the original landscape.

CustomColors.swift:
I created a separate class to pick the colors of the species. I used the hue format of UIColor because color is represented by a single value, the degree on a color wheel, which is easier to work with than the three values of traditional RGB. Each new species receives its own unique color because according to evolutionary biology, species that become extinct cannot reemerge. By adding to the degree in increments of 21, which doesn’t factor nicely into 360, I can maximize the number of different colors that are selected on the wheel without repeats.

ViewController.swift:
I represent each tile on the UI with a struct called tile. The attributes of the struct are the name of the corresponding UIImageView, a Boolean type for if the tile is land or not, an array to track all the land tiles adjacent to a land tile, and a group which is helpful for coloring in species.

I store the structs using a 2D array whose elements are arrays of tile structs. This format is useful because the indices of the tiles are separated into their x and y components in the grid view of the UI, which makes it easier to examine the tiles surrounding a certain tile. Notice that although the View Controller features 10x6 tiles, the tiles array has dimensions 12x8. This is to make examination of the edge and corner tiles easier because it eliminates possibilities for “index out of range” errors. I simply have a border of nil tiles surrounding the actual 10x6 tiles that contain useful data.

I begin by marking the structs based on the original landscape of a 3x3 landmass in the vast ocean. Although the specification of images and background colors in viewDidLoad() is not necessary since the app shows the Mainframe.storyboard upon startup, I found that images load faster when they have already been loaded once. Thus I (redundantly) specified the backgrounds and images for the original landscape to eliminate a bug where the user had to double tap to change a tile the first time. The first species population inhabits the 3x3 landmass and features a simple animation where it grows from the center, implemented using a timer. When the reset button is pressed, this exact same initialization code executes to refresh the page.

Next is the response of the app to taps. I used a UITapGestureRecognizer to specify an Action for when the tile is tapped. It will either change land to sea or sea to land.  For either change, newNeighbors() or removeNeighbors() updates the information in the structs about which land tiles are adjacent to the one just tapped.

Finally, the evolve() function updates the species populations. It collects all the land tiles in a single array by checking each tile’s land attribute. Then it iterates through the list of land tiles, assigning the same group attribute to tiles if they have mutual neighbors. This makes all members of one group all the tiles of a single landmass. The next step is to assign a random color to each group.
